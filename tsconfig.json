{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Basic Options */
    "incremental": true /* 增量编译 第二次编译速度会加快 */,
    // "tsBuildInfoFile": "./buildFile" /* 增量编译文件的存储位置 */,
    "diagnostics": true /*打印诊断信息*/,
    "target": "es5" /* 目标语言版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,
    "module": "commonjs" /* 指定生成代码的模块标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,
    "lib": ["ESNext", "DOM", "ES2015", "ES2018"] /* Specify library files to be included in the compilation. */,
    "allowJs": true /* Allow javascript files to be compiled. */,
    "checkJs": true /* Report errors in .js files. */,
    // "jsx": "preserve",                           /* Specify JSX code generation: 'preserve', 'react-native', 'react', 'react-jsx' or 'react-jsxdev'. */
    "declaration": true /* Generates corresponding '.d.ts' file. */,
    "declarationDir": "./typing" /* 声明文件的目录 */,
    "declarationMap": true /* Generates a sourcemap for each corresponding '.d.ts' file. */,
    "emitDeclarationOnly": false /* 只生成声明文件，而不会生成js文件 */,
    "sourceMap": true /* 生成目标文件的sourceMap文件. */,
    // "outFile": "./",                             /* Concatenate and emit output to single file. AMD */
    "outDir": "./dist" /* Redirect output structure to the directory. */,
    "rootDir": "./" /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */,
    // "composite": true,                           /* Enable project compilation */
    "removeComments": true /* 删除注释 */,
    "preserveConstEnums": true /* 生成枚举的映射代码 保留 const 和 enum 声明 */,
    "noEmit": false /* 不输出文件,即编译后不会生成任何js文件 Do not emit outputs. */,
    "noEmitOnError": false /* 发送错误时不输出任何文件 */,
    "noEmitHelpers": false /* 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用 */,
    "importHelpers": true /*通过tslib引入helper函数,文件必须是模块 Import emit helpers from 'tslib'. */,
    "downlevelIteration": true /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */,
    // "isolatedModules": true,                     /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    "strict": true /* 开启所有严格的类型检查 Enable all strict type-checking options. */,
    "noImplicitThis": true /* 关闭 this 类型注解提示 Raise error on 'this' expressions with an implied 'any' type. */,
    "noImplicitAny": true /* 不允许隐式any类型 */,
    "strictNullChecks": true /* 不允许把null、undefined赋值给其他类型的变量 Enable strict null checks. */,
    "strictFunctionTypes": true /* Enable strict checking of function types. */,
    "strictBindCallApply": true /* 严格的bind/call/apply检查 Enable strict 'bind', 'call', and 'apply' methods on functions. */,
    "strictPropertyInitialization": true /* 类的实例属性必须初始化 Enable strict checking of property initialization in classes. */,
    "alwaysStrict": true /* Parse in strict mode and emit "use strict" for each source file. */,

    /* Additional Checks */
    "noUnusedLocals": true /* 检查只声明、未使用的局部变量(只提示不报错) Report errors on unused locals. */,
    "noUnusedParameters": true /* 函数 Report errors on unused parameters. */,
    "noImplicitReturns": true /* 每个分支都会有返回值 Report error when not all code paths in function return a value. */,
    "noFallthroughCasesInSwitch": true /* 防止switch语句贯穿(即如果没有break语句后面不会执行) Report errors for fallthrough cases in switch statement. */,
    // "noUncheckedIndexedAccess": true,            /* Include 'undefined' in index signature results */
    // "noPropertyAccessFromIndexSignature": true,  /* Require undeclared properties from index signatures to use element accesses. */

    /* Module Resolution Options */
    "moduleResolution": "node" /* 模块解析策略，ts默认用node的解析策略，即相对的方式导入 Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,
    "baseUrl": "./" /* 解析非相对模块的基地址，默认是当前目录 Base directory to resolve non-absolute module names. */,
    "paths": {
      "tslib": ["node_modules/tslib/tslib.d.ts"]
      // 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置
      // "jquery": ["node_modules/jquery/dist/jquery.min.js"]
    } /* // 路径映射，相对于baseUrl A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */,
    "rootDirs": [] /* List of root folders whose combined content represents the structure of the project at runtime. */,
    "typeRoots": [] /* 声明文件的目录 List of folders to include type definitions from. */,
    "types": [] /* 加载的声明文件包 Type declaration files to be included in compilation. */,
    // "allowSyntheticDefaultImports": true,        /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true /* 允许export=导出，由import from 导入 Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    // "preserveSymlinks": true,                    /* Do not resolve the real path of symlinks. */
    "allowUmdGlobalAccess": true /* 允许在模块中全局变量的方式访问umd模块 Allow accessing UMD globals from modules. */,

    "listEmittedFiles": false /*打印输出文件*/,
    "listFiles": false /*打印编译的文件(包括引用的声明文件)*/,

    /* Source Map Options */
    // "sourceRoot": "",                            /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                               /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true /* Emit a single file with source maps instead of having a separate file. */,
    // "inlineSources": true,                       /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    "experimentalDecorators": true /* Enables experimental support for ES7 decorators. */,
    // "emitDecoratorMetadata": true,               /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    "skipLibCheck": true /* 跳过声明文件的类型检查 Skip type checking of declaration files. */,
    "forceConsistentCasingInFileNames": true /* 不允许对同一文件的大小写不一致的引用 Disallow inconsistently-cased references to the same file. */
  },
  // "compileOnSave": true /*  */,
  "files": ["./src/index.ts"] /* 指定待编译文件 */,
  "exclude": ["node_modules", "dist"] /* 排除不需要编译的文件 */,
  "include": ["src/**/*.ts"],
  // "extends":'' /**/,
  "references": [
    // {"path": "./common"}
  ] /*指定工程引用依赖*/,
  "typeAcquisition": {
    /* 设置自动引入库类型定义文件(.d.ts)相关 */
    // enable  : 布尔类型，是否开启自动引入库类型定义文件(.d.ts)，默认为 false
    // include  : 数组类型，允许自动引入的库名，如：["jquery", "lodash"]
    // exculde  : 数组类型，排除的库名
  }
}
